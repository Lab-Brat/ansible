---
- hosts: all
  become: yes
  vars_files: 
    - vars.yaml

  tasks:
    - name: create user if it doesn't exist
      user:
        name: "{{ user }}"
        shell: /bin/bash
        home: "/home/{{ user }}"
        groups: wheel
        append: yes

    - name: install pip , git and PostgreSQL
      dnf:
        name: '{{ item }}'
        state: present
      with_items:
        - python3-pip
        - python3-psycopg2
        - git
        - postgresql
        - postgresql-server

    - name: install Python libraries
      pip: 
        name: "{{ item }}"
        extra_args: --user
      with_items:
        - Flask
        - flask-migrate
        - SQLAlchemy
        - psycopg2
        - flask_login
      become_user: "{{ user }}"

    - name: disable SELinux
      ansible.posix.selinux:
        state: disabled
      register: selinuxdisabled

    - name: reboot for SELinux change to take effect
      shell: "sleep 5 && reboot"
      async: 1
      poll: 0
      when: selinuxdisabled is changed

    - name: wait for the reboot to complete
      wait_for_connection:
        connect_timeout: 30
        sleep: 5
        delay: 5
        timeout: 300
      when: selinuxdisabled is changed

    - name: clone github repository with forms app
      git:
        repo: '{{ gitrepo }}'
        dest: '{{ git_app }}'
        clone: yes
        update: no
      become_user: "{{ user }}"

    - name: set environmental variables
      lineinfile:
        dest: "/etc/environment"
        state: present
        regexp: "^{{ item.key }}="
        line: "{{ item.key }}={{ item.value }}"
      with_items: "{{ os_environment }}"

    - name: create the folder for database dumps
      file:
        state: directory
        path: "{{ dumps }}"
        owner: "{{ user }}"
        group: "{{ user }}"
    
    - name: change ownership of the app folder
      file:
        path: '{{ git_app }}'
        state: directory
        recurse: yes
        owner: "{{ user }}"
        group: "{{ user }}"

    - name: find out if PostgreSQL is initialized
      stat:
        path: "{{ pg_hba }}"
      register: postgres_data 

    - name: initialize postgres
      shell: "/usr/bin/postgresql-setup --initdb"
      when: not postgres_data.stat.exists

    - name: start PostgreSQL server
      service: 
        name: postgresql
        state: started 
        enabled: yes

    - name: change postgresql.conf
      lineinfile:
        path: '{{ pg_conf }}'
        regexp: "listen_addresses = 'localhost'"
        line: "listen_addresses = '*'"

    - name: change pg_hba.conf - change port
      lineinfile:
        path: '{{ pg_conf }}'
        regexp: "port = 5432"
        line: "port = {{ db_port }}"

    - name: change pg_hba.conf
      lineinfile:
        path: '{{ pg_hba }}'
        regexp: "host    all             all             127.0.0.1/32            ident"
        line: "host    all             all             127.0.0.1/32            trust"

    - name: restart postgresql for config changes to take effect
      service:
        name: postgresql
        state: restarted

    - name: remove app database if it exists
      postgresql_db:
        state: absent
        name: "{{ db_name }}"
        port: "{{ db_port }}"
      become: yes
      become_user: postgres

    - name: create app database
      postgresql_db:
        state: present
        name: "{{ db_name }}"
        port: "{{ db_port }}"
      become: yes
      become_user: postgres

    - name: create db user
      postgresql_user:
        state: present
        name: "{{ db_user }}"
        password: "{{ db_pass }}"
        port: "{{ db_port }}"
      become: yes
      become_user: postgres

    - name: grant db user access to app db
      postgresql_privs:
        type: database
        database: "{{ db_name }}"
        roles: "{{ db_user }}"
        grant_option: no
        privs: all
        port: "{{ db_port }}"
      become: yes
      become_user: postgres

    - name: ensure the firewall is running
      service:
        name: firewalld
        state: started
        enabled: yes

    - name: allow port 5000 in firewalld 
      ansible.posix.firewalld:
        port: 5000/tcp
        permanent: yes
        immediate: yes
        state: enabled

    - name: check if the migrations folder exists
      stat:
        path: "{{ git_app }}/migrations"
      register: migrations

    - name: initialize the database
      shell: '~/.local/bin/flask db init'
      args:
        chdir: "{{ git_app }}"
      become_user: "{{ user }}"
      when: not migrations.stat.exists

    - name: make db up to date
      shell: '~/.local/bin/flask db stamp head'
      args:
        chdir: "{{ git_app }}"
      become_user: "{{ user }}"

    - name: migrate the database
      shell: '~/.local/bin/flask db migrate'
      args:
        chdir: "{{ git_app }}"
      become_user: "{{ user }}"

    - name: upgrade the database
      shell: '~/.local/bin/flask db upgrade'
      args:
        chdir: "{{ git_app }}"
      become_user: "{{ user }}"

    - name: add sample data
      command: "sh {{ samples }}/add_entries.sh"
      become_user: "{{ user }}"

